
producer {
  topic: test-topic
  key.serializer: org.apache.kafka.common.serialization.StringSerializer
  value.serializer: smith.melton.serde.JsonPojoSerializer
  bootstrap.servers: "eprupetw10aa:30903, eprupetw10aa:30448,  eprupetw10aa:30805"
}

tx-producer {
  topic: test-topic
  transactional.id: user-tx-producer
  batch.size: 512 #a small batch size to ensure that we have multiple inflight requests per transaction.
  # If it is left at the default, each transaction will have only one batch per partition, hence not testing
  # the case with multiple inflights
  key.serializer: org.apache.kafka.common.serialization.StringSerializer
  value.serializer: smith.melton.serde.JsonPojoSerializer
  bootstrap.servers: "eprupetw10aa:30903, eprupetw10aa:30448,  eprupetw10aa:30805"
}

copier {
  consumer {
    topics: [test-topic]
    auto.offset.reset: latest
    isolation.level: read_committed
    fetch.max.wait.ms: 5000
    fetch.min.bytes: 1000
    bootstrap.servers: "eprupetw10aa:30903, eprupetw10aa:30448,  eprupetw10aa:30805"
    key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value.deserializer: smith.melton.serde.JsonPojoDeserializer
    entity.pojo.class: smith.melton.faker.user.User
    enable.auto.commit: false
    group.id = "tx_copier_group"
  }
  producer {
    topic: output-copier-topic
    transactional.id: copier-producer
    key.serializer: org.apache.kafka.common.serialization.StringSerializer
    value.serializer: smith.melton.serde.JsonPojoSerializer
    bootstrap.servers: "eprupetw10aa:30903, eprupetw10aa:30448,  eprupetw10aa:30805"
  }
}


transfers_producer_app {
  producer {
    topic: transfers_topic
    key.serializer: org.apache.kafka.common.serialization.UUIDSerializer
    value.serializer: smith.melton.serde.JsonPojoSerializer
    bootstrap.servers: "eprupetw10aa:30903, eprupetw10aa:30448,  eprupetw10aa:30805"
  }
}
